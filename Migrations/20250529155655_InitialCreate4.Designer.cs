// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SearchTool_ServerSide.Data;

#nullable disable

namespace SearchTool_ServerSide.Migrations
{
    [DbContext(typeof(SearchToolDBContext))]
    [Migration("20250529155655_InitialCreate4")]
    partial class InitialCreate4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SearchTool_ServerSide.Dtos.SearchLogDtos.SearchLogReadDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<string>("BinName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NDC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("PcnId")
                        .HasColumnType("integer");

                    b.Property<string>("PcnName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RxgroupId")
                        .HasColumnType("integer");

                    b.Property<string>("RxgroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SearchType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("SearchLogReadDto");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MainCompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainCompanyId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Location = "Thousand Oaks",
                            MainCompanyId = 1,
                            Name = "California Dermatology Institute Thousand Oaks"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Location = "Northridge",
                            MainCompanyId = 1,
                            Name = "California Dermatology Institute Northridge"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Location = "Huntington Park",
                            MainCompanyId = 1,
                            Name = "California Dermatology Institute Huntington Park"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Location = "Palmdale",
                            MainCompanyId = 1,
                            Name = "California Dermatology Institute Palmdale"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Location = "VIRTUAL",
                            MainCompanyId = 1,
                            Name = "VIRTUAL"
                        });
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.ClassInsurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<decimal>("BestNet")
                        .HasColumnType("numeric");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScriptCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScriptDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InsuranceId", "ClassId", "Date", "BranchId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DrugId");

                    b.ToTable("ClassInsurances");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.ClassInsuranceV2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BestNet")
                        .HasColumnType("numeric");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassV2Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DrugClassV2Id")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("integer");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScriptCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScriptDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DrugClassV2Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("ClassInsuranceV2s");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.ClassInsuranceV3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BestNet")
                        .HasColumnType("numeric");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassV3Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DrugClassV3Id")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("integer");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScriptCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScriptDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DrugClassV3Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("ClassInsuranceV3s");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ACQ")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AWP")
                        .HasColumnType("numeric");

                    b.Property<string>("ApplicationNumber")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationType")
                        .HasColumnType("text");

                    b.Property<int>("DrugClassId")
                        .HasColumnType("integer");

                    b.Property<int>("DrugClassV2Id")
                        .HasColumnType("integer");

                    b.Property<int>("DrugClassV3Id")
                        .HasColumnType("integer");

                    b.Property<string>("Form")
                        .HasColumnType("text");

                    b.Property<string>("Ingrdient")
                        .HasColumnType("text");

                    b.Property<string>("NDC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Route")
                        .HasColumnType("text");

                    b.Property<decimal?>("Rxcui")
                        .HasColumnType("numeric");

                    b.Property<string>("Strength")
                        .HasColumnType("text");

                    b.Property<string>("StrengthUnit")
                        .HasColumnType("text");

                    b.Property<string>("TECode")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrugClassId");

                    b.HasIndex("DrugClassV2Id");

                    b.HasIndex("DrugClassV3Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugBranch", b =>
                {
                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("DrugId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("DrugBranches");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DrugClasses");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugClassV2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DrugClassV2s");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugClassV3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DrugClassV3s");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugInsurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<decimal>("AcquisitionCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<int>("DrugClassId")
                        .HasColumnType("integer");

                    b.Property<int>("DrugClassV2Id")
                        .HasColumnType("integer");

                    b.Property<int>("DrugClassV3Id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<decimal>("InsurancePayment")
                        .HasColumnType("numeric");

                    b.Property<string>("NDCCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Net")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PatientPayment")
                        .HasColumnType("numeric");

                    b.Property<string>("Prescriber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InsuranceId", "DrugId", "BranchId");

                    b.HasIndex("BranchId");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugInsurances");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugMedi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CCSPanelAuthority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CostCeilingTier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<string>("DrugNDC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtendedDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NonCapitatedDrugIndicator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PriorAuthorization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugMedis");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HelpDeskNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.InsurancePCN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InsuranceId")
                        .HasColumnType("integer");

                    b.Property<string>("PCN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsurancePCNs");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.InsuranceRx", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InsurancePCNId")
                        .HasColumnType("integer");

                    b.Property<string>("RxGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InsurancePCNId");

                    b.ToTable("InsuranceRxes");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.MainCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("MainCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "California Dermatology",
                            SpecialtyId = 1
                        });
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AddtionalCost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalAcquisitionCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalInsurancePay")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalNet")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPatientPay")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AcquisitionCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AddtionalCost")
                        .HasColumnType("numeric");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<decimal>("InsurancePay")
                        .HasColumnType("numeric");

                    b.Property<int?>("InsuranceRxId")
                        .HasColumnType("integer");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PatientPay")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("InsuranceRxId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.ScriptItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AcquisitionCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<int>("DrugClassId")
                        .HasColumnType("integer");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("InsurancePayment")
                        .HasColumnType("numeric");

                    b.Property<string>("NDCCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PatientPayment")
                        .HasColumnType("numeric");

                    b.Property<int>("PrescriberId")
                        .HasColumnType("integer");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ScriptId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DrugClassId");

                    b.HasIndex("DrugId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("PrescriberId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptItems");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.SearchLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DrugId")
                        .HasColumnType("integer");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("integer");

                    b.Property<int?>("InsurancePCNId")
                        .HasColumnType("integer");

                    b.Property<int?>("InsuranceRxId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("PcnId")
                        .HasColumnType("integer");

                    b.Property<int?>("RxgroupId")
                        .HasColumnType("integer");

                    b.Property<string>("SearchType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsurancePCNId");

                    b.HasIndex("InsuranceRxId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchLogs");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dermatology specialty"
                        });
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServerSide.Models.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScriptCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Dtos.SearchLogDtos.SearchLogReadDto", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.OrderItem", null)
                        .WithOne("SearchLogReadDto")
                        .HasForeignKey("SearchTool_ServerSide.Dtos.SearchLogDtos.SearchLogReadDto", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Branch", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.MainCompany", "MainCompany")
                        .WithMany("Branches")
                        .HasForeignKey("MainCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCompany");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.ClassInsurance", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.DrugClass", "DrugClass")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.InsuranceRx", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Drug");

                    b.Navigation("DrugClass");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.ClassInsuranceV2", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.DrugClassV2", "DrugClassV2")
                        .WithMany()
                        .HasForeignKey("DrugClassV2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.InsuranceRx", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Drug");

                    b.Navigation("DrugClassV2");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.ClassInsuranceV3", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.DrugClassV3", "DrugClassV3")
                        .WithMany()
                        .HasForeignKey("DrugClassV3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.InsuranceRx", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Drug");

                    b.Navigation("DrugClassV3");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Drug", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.DrugClass", "DrugClass")
                        .WithMany()
                        .HasForeignKey("DrugClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.DrugClassV2", "DrugClassV2")
                        .WithMany()
                        .HasForeignKey("DrugClassV2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.DrugClassV3", "DrugClassV3")
                        .WithMany()
                        .HasForeignKey("DrugClassV3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrugClass");

                    b.Navigation("DrugClassV2");

                    b.Navigation("DrugClassV3");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugBranch", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugInsurance", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.InsuranceRx", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Drug");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.DrugMedi", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.InsurancePCN", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Insurance", "Insurance")
                        .WithMany("InsurancePCNs")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.InsuranceRx", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.InsurancePCN", "InsurancePCN")
                        .WithMany("InsuranceRxs")
                        .HasForeignKey("InsurancePCNId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePCN");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Log", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.MainCompany", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Specialty", "Specialty")
                        .WithMany("MainCompanies")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Order", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.OrderItem", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.InsuranceRx", "InsuranceRx")
                        .WithMany()
                        .HasForeignKey("InsuranceRxId");

                    b.HasOne("SearchTool_ServerSide.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("InsuranceRx");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.ScriptItem", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.DrugClass", "DrugClass")
                        .WithMany()
                        .HasForeignKey("DrugClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.InsuranceRx", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.User", "Prescriber")
                        .WithMany()
                        .HasForeignKey("PrescriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerSide.Models.Script", "Script")
                        .WithMany("ScriptItems")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("DrugClass");

                    b.Navigation("Insurance");

                    b.Navigation("Prescriber");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.SearchLog", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("SearchTool_ServerSide.Models.InsurancePCN", "InsurancePCN")
                        .WithMany()
                        .HasForeignKey("InsurancePCNId");

                    b.HasOne("SearchTool_ServerSide.Models.InsuranceRx", "InsuranceRx")
                        .WithMany()
                        .HasForeignKey("InsuranceRxId");

                    b.HasOne("SearchTool_ServerSide.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Insurance");

                    b.Navigation("InsurancePCN");

                    b.Navigation("InsuranceRx");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.User", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("ServerSide.Models.Script", b =>
                {
                    b.HasOne("SearchTool_ServerSide.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchTool_ServerSide.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Branch", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Insurance", b =>
                {
                    b.Navigation("InsurancePCNs");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.InsurancePCN", b =>
                {
                    b.Navigation("InsuranceRxs");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.MainCompany", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.OrderItem", b =>
                {
                    b.Navigation("SearchLogReadDto")
                        .IsRequired();
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.Specialty", b =>
                {
                    b.Navigation("MainCompanies");
                });

            modelBuilder.Entity("SearchTool_ServerSide.Models.User", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("ServerSide.Models.Script", b =>
                {
                    b.Navigation("ScriptItems");
                });
#pragma warning restore 612, 618
        }
    }
}
