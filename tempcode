public async Task ImportDrugInsuranceAsync(string filePath = "scripts.csv")
{
    var config = new CsvConfiguration(CultureInfo.InvariantCulture)
    {
        HasHeaderRecord = true,
        HeaderValidated = null, // Ignore missing headers
    };

    using var reader = new StreamReader(filePath);
    using var csv = new CsvReader(reader, config);
    var records = csv.GetRecords<ScriptRecord>().ToList();
    int cnt = 0;

    foreach (var record in records)
    {
        // Check if insurance exists
        var insurance = await _context.Insurances
            .FirstOrDefaultAsync(i => i.Name == record.Insurance);

        if (insurance == null)
        {
            insurance = new Insurance { Name = record.Insurance };
            await _context.Insurances.AddAsync(insurance);
            await _context.SaveChangesAsync();
        }

        // Normalize NDC Code
        record.NDCCode = NormalizeNdcTo11Digits(record.NDCCode);

        // Check if drug exists
        var drug = await _context.Drugs.FirstOrDefaultAsync(i => i.NDC == record.NDCCode);
        var tempDrug = await _context.Drugs.FirstOrDefaultAsync(x => x.Name == record.DrugName);
        if (drug == null)
        {
            if (tempDrug != null)
            {
                drug = new Drug
                {
                    Name = record.DrugName,
                    NDC = record.NDCCode,
                    Form = tempDrug.Form,
                    Strength = tempDrug.Strength,
                    DrugClassId = tempDrug.DrugClassId,
                    ACQ = record.AcquisitionCost,
                    AWP = 0,
                    Rxcui = tempDrug.Rxcui
                };
                await _context.Drugs.AddAsync(drug);
                tempDrug.ACQ = record.AcquisitionCost;
                _context.Drugs.Update(tempDrug);
                await _context.SaveChangesAsync();
            }
            else
            {
                Console.WriteLine($"Skipping record: Drug with NDC {record.NDCCode} not found.");
                // Console.ReadLine();
                continue; // Skip this record

            }
        }

        var classItem = await _context.DrugClasses.FirstOrDefaultAsync(x => x.Id == drug.DrugClassId);

        // Check if drug insurance entry exists
        var exists = await _context.DrugInsurances
            .FirstOrDefaultAsync(di => di.InsuranceId == insurance.Id && di.DrugId == drug.Id);

        if (exists == null)
        {
            var drugInsurance = new DrugInsurance
            {
                InsuranceId = insurance.Id,
                DrugId = drug.Id,
                NDCCode = record.NDCCode,
                DrugName = record.DrugName,
                Net = record.PatientPayment + record.InsurancePayment - record.AcquisitionCost,
                DrugClassId = classItem.Id,
                date = DateTime.ParseExact(record.Date, "MM-dd-yy", CultureInfo.InvariantCulture).ToUniversalTime(),
                Prescriber = record.Prescriber,
                Quantity = record.Quantity,
                AcquisitionCost = record.AcquisitionCost,
                Discount = record.Discount,
                insuranceName = record.Insurance,
                InsurancePayment = record.InsurancePayment,
                PatientPayment = record.PatientPayment,
                DrugClass = classItem.Name
            };
            await _context.DrugInsurances.AddAsync(drugInsurance);
        }
        else
        {
            DateTime existsDate = exists.date, recordDate = DateTime.ParseExact(record.Date, "MM-dd-yy", CultureInfo.InvariantCulture).ToUniversalTime();
            if (existsDate < recordDate)
            {
                exists.Net = record.PatientPayment + record.InsurancePayment - record.AcquisitionCost;
                exists.AcquisitionCost = record.AcquisitionCost;
                exists.Discount = record.Discount;
                exists.InsurancePayment = record.InsurancePayment;
                exists.PatientPayment = record.PatientPayment;
                exists.date = recordDate;
                _context.DrugInsurances.Update(exists);

            }

        }
        await _context.SaveChangesAsync();

        var recordDat = DateTime.SpecifyKind(DateTime.ParseExact(record.Date, "MM-dd-yy", CultureInfo.InvariantCulture), DateTimeKind.Utc);
        var yearMonth = new DateTime(recordDat.Year, recordDat.Month, 1, 0, 0, 0, DateTimeKind.Utc);

        var ClassInsuranceExists = await _context.ClassInsurances.FirstOrDefaultAsync(x =>
            x.InsuranceId == insurance.Id && x.ClassId == classItem.Id && x.Date.Year == recordDat.Year && x.Date.Month == recordDat.Month);
        // if (yearMonth.Month == 11)
        // {
        //     Console.WriteLine("how!!!" + record.Date + " : " + DateTime.ParseExact(record.Date, "MM-dd-yy", CultureInfo.InvariantCulture).ToUniversalTime());
        //     Console.ReadKey();
        // }
        if (ClassInsuranceExists == null)
        {
            var classInsurance = new ClassInsurance
            {
                InsuranceId = insurance.Id,
                InsuranceName = insurance.Name,
                ClassId = classItem.Id,
                DrugId = drug.Id,
                Date = yearMonth,
                ClassName = classItem.Name,
                ScriptDateTime = yearMonth,
                ScriptCode = record.Script,
                BestNet = record.PatientPayment + record.InsurancePayment - record.AcquisitionCost
            };
            _context.ClassInsurances.Add(classInsurance);
            await _context.SaveChangesAsync();
        }
        else
        {
            var bestNet = record.PatientPayment + record.InsurancePayment - record.AcquisitionCost;
            if (bestNet > ClassInsuranceExists.BestNet)
            {
                ClassInsuranceExists.BestNet = bestNet;
                ClassInsuranceExists.DrugId = drug.Id;
                ClassInsuranceExists.ScriptCode = record.Script;
                ClassInsuranceExists.ScriptDateTime = DateTime.ParseExact(record.Date, "MM-dd-yy", CultureInfo.InvariantCulture).ToUniversalTime();
                _context.ClassInsurances.Update(ClassInsuranceExists);
                await _context.SaveChangesAsync();
            }
        }
        var script = new Script
        {
            Date = DateTime.ParseExact(record.Date, "MM-dd-yy", CultureInfo.InvariantCulture).ToUniversalTime(),
            ScriptCode = record.Script,
            RxNumber = record.RxNumber,
            User = record.User,
            DrugName = record.DrugName,
            PF = record.PF,
            Insurance = record.Insurance,
            Prescriber = record.Prescriber,
            Quantity = record.Quantity,
            AcquisitionCost = record.AcquisitionCost,
            NDCCode = record.NDCCode,
            Discount = record.Discount,
            InsurancePayment = record.InsurancePayment,
            PatientPayment = record.PatientPayment,
            NetProfit = record.PatientPayment + record.InsurancePayment - record.AcquisitionCost,
            DrugClass = classItem.Name
        };
        _context.Scripts.Add(script);
        cnt++;

        if (cnt == 1000)
        {
            cnt = 0;
            await _context.SaveChangesAsync();
        }
    }

    await _context.SaveChangesAsync();
}
